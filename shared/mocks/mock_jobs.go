// Code generated by MockGen. DO NOT EDIT.
// Source: shared/repository (interfaces: JobRepositoryInterface)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_jobs.go -package=mocks . JobRepositoryInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	models "shared/models"

	gomock "go.uber.org/mock/gomock"
)

// MockJobRepositoryInterface is a mock of JobRepositoryInterface interface.
type MockJobRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockJobRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockJobRepositoryInterfaceMockRecorder is the mock recorder for MockJobRepositoryInterface.
type MockJobRepositoryInterfaceMockRecorder struct {
	mock *MockJobRepositoryInterface
}

// NewMockJobRepositoryInterface creates a new mock instance.
func NewMockJobRepositoryInterface(ctrl *gomock.Controller) *MockJobRepositoryInterface {
	mock := &MockJobRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockJobRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobRepositoryInterface) EXPECT() *MockJobRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateJob mocks base method.
func (m *MockJobRepositoryInterface) CreateJob(ctx context.Context, job *models.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", ctx, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockJobRepositoryInterfaceMockRecorder) CreateJob(ctx, job any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockJobRepositoryInterface)(nil).CreateJob), ctx, job)
}

// GetAllJobs mocks base method.
func (m *MockJobRepositoryInterface) GetAllJobs(ctx context.Context) ([]*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllJobs", ctx)
	ret0, _ := ret[0].([]*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllJobs indicates an expected call of GetAllJobs.
func (mr *MockJobRepositoryInterfaceMockRecorder) GetAllJobs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllJobs", reflect.TypeOf((*MockJobRepositoryInterface)(nil).GetAllJobs), ctx)
}

// GetJob mocks base method.
func (m *MockJobRepositoryInterface) GetJob(ctx context.Context, id string) (*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", ctx, id)
	ret0, _ := ret[0].(*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockJobRepositoryInterfaceMockRecorder) GetJob(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockJobRepositoryInterface)(nil).GetJob), ctx, id)
}

// UpdateJob mocks base method.
func (m *MockJobRepositoryInterface) UpdateJob(ctx context.Context, id string, status *models.JobStatus, result *models.AnalyzeResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJob", ctx, id, status, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJob indicates an expected call of UpdateJob.
func (mr *MockJobRepositoryInterfaceMockRecorder) UpdateJob(ctx, id, status, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJob", reflect.TypeOf((*MockJobRepositoryInterface)(nil).UpdateJob), ctx, id, status, result)
}

// UpdateJobStatus mocks base method.
func (m *MockJobRepositoryInterface) UpdateJobStatus(ctx context.Context, id string, status models.JobStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobStatus indicates an expected call of UpdateJobStatus.
func (mr *MockJobRepositoryInterfaceMockRecorder) UpdateJobStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobStatus", reflect.TypeOf((*MockJobRepositoryInterface)(nil).UpdateJobStatus), ctx, id, status)
}
