// Code generated by MockGen. DO NOT EDIT.
// Source: shared/repository (interfaces: TaskRepositoryInterface)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_tasks.go -package=mocks . TaskRepositoryInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	models "shared/models"

	gomock "go.uber.org/mock/gomock"
)

// MockTaskRepositoryInterface is a mock of TaskRepositoryInterface interface.
type MockTaskRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockTaskRepositoryInterfaceMockRecorder is the mock recorder for MockTaskRepositoryInterface.
type MockTaskRepositoryInterfaceMockRecorder struct {
	mock *MockTaskRepositoryInterface
}

// NewMockTaskRepositoryInterface creates a new mock instance.
func NewMockTaskRepositoryInterface(ctrl *gomock.Controller) *MockTaskRepositoryInterface {
	mock := &MockTaskRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepositoryInterface) EXPECT() *MockTaskRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddSubTaskByKey mocks base method.
func (m *MockTaskRepositoryInterface) AddSubTaskByKey(ctx context.Context, jobId string, taskType models.TaskType, key string, subtask models.SubTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubTaskByKey", ctx, jobId, taskType, key, subtask)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSubTaskByKey indicates an expected call of AddSubTaskByKey.
func (mr *MockTaskRepositoryInterfaceMockRecorder) AddSubTaskByKey(ctx, jobId, taskType, key, subtask any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubTaskByKey", reflect.TypeOf((*MockTaskRepositoryInterface)(nil).AddSubTaskByKey), ctx, jobId, taskType, key, subtask)
}

// CreateTasks mocks base method.
func (m *MockTaskRepositoryInterface) CreateTasks(ctx context.Context, tasks ...*models.Task) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range tasks {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTasks", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTasks indicates an expected call of CreateTasks.
func (mr *MockTaskRepositoryInterfaceMockRecorder) CreateTasks(ctx any, tasks ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, tasks...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTasks", reflect.TypeOf((*MockTaskRepositoryInterface)(nil).CreateTasks), varargs...)
}

// GetTasksByJobId mocks base method.
func (m *MockTaskRepositoryInterface) GetTasksByJobId(ctx context.Context, jobId string) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksByJobId", ctx, jobId)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksByJobId indicates an expected call of GetTasksByJobId.
func (mr *MockTaskRepositoryInterfaceMockRecorder) GetTasksByJobId(ctx, jobId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksByJobId", reflect.TypeOf((*MockTaskRepositoryInterface)(nil).GetTasksByJobId), ctx, jobId)
}

// UpdateSubTaskByKey mocks base method.
func (m *MockTaskRepositoryInterface) UpdateSubTaskByKey(ctx context.Context, jobId string, taskType models.TaskType, key string, subtask models.SubTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubTaskByKey", ctx, jobId, taskType, key, subtask)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubTaskByKey indicates an expected call of UpdateSubTaskByKey.
func (mr *MockTaskRepositoryInterfaceMockRecorder) UpdateSubTaskByKey(ctx, jobId, taskType, key, subtask any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubTaskByKey", reflect.TypeOf((*MockTaskRepositoryInterface)(nil).UpdateSubTaskByKey), ctx, jobId, taskType, key, subtask)
}

// UpdateTaskStatus mocks base method.
func (m *MockTaskRepositoryInterface) UpdateTaskStatus(ctx context.Context, jobId string, taskType models.TaskType, status models.TaskStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskStatus", ctx, jobId, taskType, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskStatus indicates an expected call of UpdateTaskStatus.
func (mr *MockTaskRepositoryInterfaceMockRecorder) UpdateTaskStatus(ctx, jobId, taskType, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskStatus", reflect.TypeOf((*MockTaskRepositoryInterface)(nil).UpdateTaskStatus), ctx, jobId, taskType, status)
}
